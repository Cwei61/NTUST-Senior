<% content_for :title, "推薦店家" %>
<div style="display: none" class="container">
      <input
        id="pac-input"
        class="controls form-control"
        type="text"
        placeholder="請搜尋"
      />
</div>
<div id="map"></div>
<div id="infowindow-content">
  <img class="w-100 ps-2 pe-2 pt-2 pb-2 d-block ms-auto me-auto" src="https://www.102like.com/manage/0/product/30802/1516761523_922.jpg" alt="" id="place-photo">
  <span id="place-name" class="title"></span><br />
  <span id="place-address"></span>
  <button class="btn btn-success d-block w-100 mt-3" id="button">推薦</button>
</div>
<script
      src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY']%>&callback=initMap&libraries=places&v=weekly"
      async
    ></script>
<style>
/* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
#map {
  height: 100%;
}

/* Optional: Makes the sample page fill the window. */
html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.controls {
  background-color: #fff;
  border-radius: 2px;
  border: 1px solid transparent;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  box-sizing: border-box;
  font-family: Roboto;
  font-size: 15px;
  font-weight: 300;
  height: 29px;
  margin-left: 10%;
  margin-top: 10px;
  outline: none;
  padding: 0 11px 0 13px;
  text-overflow: ellipsis;
  max-width: 80%;
}

.controls:focus {
  border-color: #4d90fe;
}

.title {
  font-weight: bold;
}

#infowindow-content {
  display: none;
}

#map #infowindow-content {
  display: inline;
}
</style>
<script>
function initMap() {
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat:25.00987895, lng:121.53776285},
    zoom: 14,
    disableDefaultUI: true
  });
  const input = document.getElementById("pac-input");
  const autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo("bounds", map);
  // Specify just the place data fields that you need.
  autocomplete.setFields(["place_id", "geometry", "formatted_address", "name", "photos"]);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  const infowindow = new google.maps.InfoWindow();
  const infowindowContent = document.getElementById("infowindow-content");
  infowindow.setContent(infowindowContent);
  const marker = new google.maps.Marker({ map: map });
  marker.addListener("click", () => {
    infowindow.open(map, marker);
  });

  const button = document.getElementById("button");
  autocomplete.addListener("place_changed", () => {
    infowindow.close();
    const place = autocomplete.getPlace();

    if (!place.geometry || !place.geometry.location) {
      return;
    }

    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
    }
    // Set the position of the marker using the place ID and location.
    marker.setPlace({
      placeId: place.place_id,
      location: place.geometry.location,
    });
    marker.setVisible(true);
    infowindowContent.children.namedItem("place-name").textContent = place.name;
    infowindowContent.children.namedItem("place-address").textContent =
      place.formatted_address;
    infowindowContent.children.namedItem("place-photo").setAttribute('src', place.photos[0].getUrl({'maxHeight': 250}));
    infowindow.open(map, marker);
    button.addEventListener("click", () => {
      liff.sendMessages([
      {
        type: 'text',
        text: `新增美食店家/${place.place_id}`
      }
      ])  
      .then(() => {
        console.log('message sent');
      })
      .catch((err) => {
        console.log('error', err);
      });
      liff.closeWindow();
    });
  });
}
</script>